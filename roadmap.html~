<!DOCTYPE html>

<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->

<!--[if gt IE 8]><!--> <html class="no-js" lang="en"> <!--<![endif]-->

<head>
	<meta charset="UTF-8">
	
	<!-- Remove this line if you use the .htaccess -->
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

	<meta name="viewport" content="width=device-width">
	
	<meta name="description" content="Build a simple opearting system">
	
	<title>Roadmap // eXperimental Operating System</title>
	<link rel="shortcut icon" type="image/png" href="favicon.png">
	
	<link href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,400,700' rel='stylesheet' type='text/css'>
	<link rel="stylesheet" href="css/style.css">
	
	<!--[if lt IE 9]>
	<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->
</head>



<body>
<!-- Prompt IE 7 users to install Chrome Frame -->
<!--[if lt IE 8]><p class=chromeframe>Your browser is <em>ancient!</em> <a href="http://browsehappy.com/">Upgrade to a different browser</a> or <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to experience this site.</p><![endif]-->

<div class="container">

	<header id="navtop">
		<a href="index.html" class="logo fleft">
			<img src="img/logo.png" alt="Designa Studio">
		</a>
		
		<nav class="fright">
			<ul><li><a href="index.html" >Home</a></li>
				<li><a href="about.html">About</a></li>
				<li><a href="documentation.html" >Documentation</a></li>
				<li><a href="downloads.html">Downloads</a></li>
				<li><a href="roadmap.html" class="navactive">Roadmap</a></li></ul>
			</ul>
		</nav>
	</header>


	<div class="services-page main grid-wrap">

		<header class="grid col-full">
			<hr>
			<p class="fleft">Roadmap</p>
		</header>


		<aside class="grid col-one-quarter mq2-col-full">
		
			<menu>
				<ol style="list-style-type:decimal">
					<li><a href="#navstage1" class="sec" >Understanding the Filesystem</a></li>
					<li><a href="#navstage2" class="sec">Starting the machine</a></li>
					<li><a href="#navstage3" class="sec">Running a user program</a></li>
					<li><a href="#navstage4" class="sec">Playing with files</a></li>
					<li><a href="#navstage5" class="sec">The Exec System Call</a></li>
					<li><a href="#navstage6" class="sec">Multiprogramming</a></li>
					<li><a href="#navstage7" class="sec">Process System Calls</a></li>
					<li><a href="#navstage8" class="sec">Exception Handling</a></li>
					<li><a href="#navstage9" class="sec">Making a console</a></li>
				
				</ol>
			</menu>
		</aside>
		
		<section class="grid col-three-quarters mq2-col-full">
		
			
			
			<div class="grid-wrap">
			<article  id="navstage1" class="grid col-full">
			<h2>Stage 1: Understanding the Filesystem </h2>
			<p> The first stage of building XOS begins with understanding the underlying XFS Filesystem interface. </p>
			
			<ul>
			<li> Download the XFS-Interface from the <a href="downloads.html">downloads</a> page and compile the program following the instructions given in the page.</li>
			<li> Start by formatting the disk in the XFS interface using <b>fdisk</b> command. A file named <i>disk.xfs</i> is created, which simulates the hard disk.</li>
			<li> Load a data file to the XFS formatted disk from your UNIX machine.  Read about  <a href="xfs-spec.html#navfile" >Files</a> in XFS</li>
			<li> Find out the FAT entry corresponding to the loaded file. Use the <b>copy</b> command to copy FAT entries to a file in your PC. See <a href="xfs-spec.html#navdiskorg">disk organization</a> of XFS Disk.  </li>
			<li> Check the <a href="xfs-spec.html#navfat">FAT entry</a> and find the basic block. Copy it to get the data blocks used by this file.</li>
			<li> Copy the data blocks and display the file </li>
			</ul>


			
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>	
			
			<article  id="navstage2" class="grid col-full">
			<h2>Stage 2: Starting the machine </h2>
			<p> The next stage is to make the machine display <i>"Hello World"</i> on startup.    </p>
			<ul>
			<li>
			Create a "Hello World" program using <a href="spl-spec.html">SPL</a> (System Programmer's Language).
			The code snippet is given below. 
			<div class="syntax"> 
			R0 = "Hello World"; </br>
			print R0 ;</br>
			</div>
			</li>
			<li>
			Load it as the OS startup code to <tt>disk.xfs</tt> using the XFS Interface. 
			</li>
			<li> Download the XSM Simulator from the <a href="downloads.html">downloads</a> page. Unzip the directory.</li>
			<li> Place the <b>xfs-interface</b> directory in same directory as <b>xsm</b> directory. ( or change the <b>DISK_NAME</b>  to the path of <tt>disk.xfs</tt> in <b>disk.h</b> in <b>xsm</b> directory) </li>
			<li> Follow the instructions in README to compile the machine simulator </li>
			<li> cd to xsm directory. Run the machine using the command <tt>./xsm -id </tt>.
			
			</ul>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>			

			<article  id="navstage3" class="grid col-full">
			<h2>Stage 3: Running a user program </h2>
			<p> User programs or application programs are programmed using <a href="apl-spec.html">APL</a> or Application Programmer's Language. In this stage, an application program in APL is compiled and loaded to the disk as the init process. An OS Startup code is written in <a href="spl-spec.html">SPL</a> to load this program to the memory on machine startup. 		  </p>
			<ul>
			<li> Download APL Compiler from the <a href="downloads.html">downloads</a> page. Unzip and install the compiler following the instructions in the README </li>
			<li> Write a program in APL to print all prime numbers lesser than a number taken as input. See <a href="apl-spec.html#navexamples">Examples</a> of APL programs</li>
			<li> Compile your APL program using <b> ./apl < <i>path-to-your-program</i> > </b>. </li>
			<li> Load it to <b>disk.xfs</b> as <b>INIT program</b> using XFS interface </li>
			<li> For for the machine to halt when it runs a user program, <b>INT 7</b> and <b>Exception handler</b> of the <b>disk.xfs</b> must be loaded with a file containing just the <tt>HALT</tt> instruction. 
			<br/><br/>
			<h6>OS Startup Code</h6>
			The executable files in <b>INT 7</b>, <b> Exception Handler</b> and the program to print primes  must be loaded to the memory from the XFS disk by the OS Startup Code when the machine starts. The OS Startup Code must be written in <a href="spl-spec.html">SPL</a>, compiled and loaded to the disk as done in the previous stage. The new OS Startup Code must do the following tasks. </br><br/>
			<li> Load Exception Handler (disk block 1 and memory page 7) and INT 7 (disk block 9 and memory page 15) from  the disk to the memory using<a href="spl-spec.html#navlsstmt" > load</a> instruction.  
			<div class="syntax">
			 load (page_number, block_number);
			</div> </li>
			<li>
			Load the <b>INIT process</b> from the disk to the memory. Load blocks 13-15 from disk to memory pages 16 - 18 in the memory.
			</li>
			<li> 
			Setup page tables for the INIT process in the followin way. (Read about <a href="xsm-spec.html#navaddr"> Address Translation </a>).
		 		<ul>
		 		<li>Set <b>PTBR</b> (Page Table Base Register) to 1024, which is the starting address of process page tables (See <a href="xos-spec.html#navmemorg" >Memory Organization</a>) and <b>PTLR</b> to 4.  </li>
		 		<li> Each page table entry contains 2 words. Set the first word of each entry to corresponding memory address and set the second word (Auxiliary information) as <b>11</b>. Refer <a href="xos-spec.html#navmemmgmt_paging">Paging</a> to see the structure of page table entry. </li>
			<li> Setup entries for memory pages 16 to 18 in the page table as well as one entry for the stack (19th page) </li>
			Setting up the entries of page table can be done in the following way
			<div class="syntax">
			 [PTBR + 0] = 16;  // Entry for memory address<br/>
			 [PTBR + 1] = 11;  // Entry for flag<br/>
			   .	<br/>
			   .	<br/>
			   .	<br/>
			 [PTBR + 6] = 19;  // Memory address of stack <br/>
			 [PTBR + 7] = 11;	<br/>
			</div>
			</li>
			
			</ul>
			
			<li> The next structure to setup is the INIT's Process Control Block. (See <a href="xos-spec.html#navpromgmt_pcb"> PCB </a> ). The starting address of INIT's PCB is <b>1536</b>. SPL has a predefined constant <tt>READY_LIST</tt> with this value stored. Setup the PCB with each corresponding entry. 
				<ul>
				<li> Set the 1st word with the PID which is 0 for INIT Process </li>
				<div class="syntax">
				 [READY_LIST + 0] = 0 // Sets the entry for PID as 0
				</div>
				<li> Similarly, <tt>STATE</tt> of INIT process is set to 2 (running) </li>
				<li> The remaining entries need not be set by the OS startup code and will be done in subsequent stages.  </li>
				
				</ul> <br/>
			
			
			<li> Once the control gets transferred to the user program, all addresses are logical addresses. Therefore <b>SP</b> (Stack Pointer) must be set to 3*512 (stack is allocated with logical page number 3). And <b>BP</b> (Base Pointer) is   </li>
			<li> Store 0 in the stack (page number 19 in memory). This value gets stored in IP after an <b>ireturn</b> instruction. 
			<div class="syntax">
			[19*512] = 0;
			</div></li>
			
			<li> Use the <b>ireturn</b> instruction to transfer control to user program. This instruction calls the machine instruction <tt>IRET</tt> which changes privilege mode from KERNEL to USER (See <a href="xsm-spec.html#navmodes">privilege modes</a>). <tt>IRET</tt> then gets the value stored in memory location pointed to by SP which is 0 (See previous step). The logical address 3*512 stored in SP gets translated to get the actual location of the stack. This value is stored in IP (In USER mode, IP has logical addresses) and SP is decremented by one (equivalent to popping the stack). </li> 
		 		
		 		
			</li>
			</ul>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>	


			<article  id="navstage4" class="grid col-full">
			<h2>Stage 4: Playing with files </h2>
			<p> In this stage, you will implement file system calls  <b>Create, Delete, Open, Close, Seek, Read</b> and <b> Write </b>. The following tasks should be done in this stage </p>
			<h6> Modifying the OS Startup Code</h6>
			<ul>
			<li> Load FAT and Disk Free List from the disk blocks to corresponding memory pages. Refer <a href="xos-spec.html#navmemorg">Memory Organization</a> and <a href="xfs-spec.html#navdiskorg">Disk Organization </a>. </li>
			</li>
			<li>
			Set the <a href="xos-spec.html#navfiles_swoft">System-Wide Open File Table</a> entries to -1 (invalid initially). 	</li>
			<div class="syntax">
			<pre>
alias counter R8;	// R8 - R15 is used by system programmers.
counter = 0;
while ( counter <=  128) do
	[ FILE_TABLE + counter] = -1;
endwhile;						</pre>
			</div>
			<li> Set all words in the <a href="xos-spec.html#navpromgmt_pcb">Per-Process Open-File Table in the PCB</a> of INIT to -1  </li>
			
			<li> 
			<a href="xos-spec.html#navsyscalls_file">File System Calls</a> are implemented in Interrupt 1 (Create & Delete),  2 (Open & Close), 3 (Seek & Read) and 4 (Write) Routines. These 4 interrupt routines must be programmed in SPL, compiled and loaded into the disk in the corresponding locations using the XFS-Interface. These interrupt routines must be loaded from the disk to corresponding memory pages by the OS Startup Code.
			</li>
			</ul>
			Each system call will be invoked from a user program which invokes the <tt> INT </tt> instruction after pushing the registers, arguments and system call number into the stack.  <img src="doc/syscallstack.png" style="width:100%">
			<h5> Interrupt Routine 1 </h5>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>	
			

			<article  id="navstage5" class="grid col-full">
			<h2>Stage 5: The Exec System Call</h2>
			<p>  Not Available  </p>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>	
			

			<article  id="navstage6" class="grid col-full">
			<h2>Stage 6: Multiprogramming</h2>
			<p>  Not Available . </p>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>	
			
			<article  id="navstage7" class="grid col-full">
			<h2>Stage 7: Process System Calls  </h2>
			<p>  Not Available . </p>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>		
			
			<article  id="navstage8" class="grid col-full">
			<h2>Stage 8: Exception Handling </h2>
			<p>  Not Available  </p>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>		
			
			<article  id="navstage9" class="grid col-full">
			<h2>Stage 9: Making a console </h2>
			<p> Not Available  </p>
			</article>
			<div class="up grid col-one-third" style="float:right">
			<a href="#navtop" title="Go back up"> top &uarr;</a>
			</div>					
							
		</div> <!-- 100%articles-->

		
		</section>	
		
		
		
	</div> <!--main-->
<div class="divide-top">
	<footer class="grid-wrap">
		<ul class="grid col-one-third social">
			<li><a href="http://github.com/XOS-NITC">Github</a></li>
		</ul>
	
		<div class="up grid col-one-third ">
			<a href="#navtop" title="Go back up">&uarr;</a>
		</div>
		
		<nav class="grid col-one-third ">
			<ul><li><a href="index.html" >Home</a></li>
				<li><a href="about.html">About</a></li>
				<li><a href="documentation.html">Documentation</a></li>
				<li><a href="downloads.html">Downloads</a></li>
				<li><a href="roadmap.html">Roadmap</a></li></ul>
			</ul>
		</nav>
	</footer>
</div>
</div>

<!-- Javascript - jQuery -->
<script src="http://code.jquery.com/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="js/jquery-1.7.2.min.js"><\/script>')</script>

<!--[if (gte IE 6)&(lte IE 8)]>
<script src="js/selectivizr.js"></script>
<![endif]-->

<script src="js/scripts.js"></script>

<!-- Asynchronous Google Analytics snippet. Change UA-XXXXX-X to be your site's ID. -->
<script>
  var _gaq=[['_setAccount','UA-XXXXX-X'],['_trackPageview']];
  (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
  g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
  s.parentNode.insertBefore(g,s)}(document,'script'));
</script>
</body>
</html>

